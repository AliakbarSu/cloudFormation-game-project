 
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A Node.js web service deployed to AWS Lambda.
Parameters:
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: production
  RestApiName:
    Type: String
    Default: clickCollectionRestApi
  ClickCollectRestApiStageName:
    Type: String
    Default: production
Resources:

  #######################
  # API GATEWAY REST
  #######################
  ClickCollectRestApi: 
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "Click&Collect REST API"
      Description: "handle all non-websocket routes"

  ClickCollectRestApiSignUpMethod: 
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "signUp.Arn"
      ResourceId: !GetAtt "ClickCollectRestApi.RootResourceId"
      RestApiId: !Ref "ClickCollectRestApi"

  ClickCollectRestApiDeployment: 
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "ClickCollectRestApiSignUpMethod"
    Properties:
      RestApiId: !Ref "ClickCollectRestApi"
      StageName: !Ref ClickCollectRestApiStageName

  signUp: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/cognitoSignUp
      Description: "Sign user up by creating a new record in the cognito user pool.."
      FunctionName: "cognitoSignUp"
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt "signUpRole.Arn"
      Runtime: nodejs12.x
      Timeout: 10
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Environment:
        Variables:
          USER_POOL_ID: !Ref ClickCollectCognitoUserPool
          USER_POOL_CLIENT_ID: !Ref ClickCollectCognitoUserPoolClient

  lambdaApiGatewayInvoke: 
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "signUp.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClickCollectRestApi}/*/POST/"

  signUpRole: 
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cognitoSignUp:*"
          PolicyName: "AWSLambdaBasicExecutionRole"
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "cognito-identity:GetOpenIdTokenForDeveloperIdentity"
                  - "cognito-identity:LookupDeveloperIdentity"
                  - "cognito-identity:MergeDeveloperIdentities"
                  - "cognito-identity:UnlinkDeveloperIdentity"
                Effect: "Allow"
                Resource: "*"
          PolicyName: "AmazonCognitoDeveloperAuthenticatedIdentities"
  signUpGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${signUp}"
      RetentionInDays: 90
  
  #######################
  # API GATEWAY WEBSOCKET
  #######################
  ApiGwAccountConfig:
    DependsOn:
      - ClickCollectWebsocket
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "ClickCollectWebsocketLoggingRole.Arn"
  # The top-level websocket itself
  ClickCollectWebsocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ClickCollectWebsocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.message"
      CredentialsArn: !GetAtt ClickCollectWebsocketRole.Arn
  # CONNECT ROUTE.
  ClickCollectConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref CognitoLambdaAuthorizer
      OperationName: ClickCollectConnectRoute
      # RouteResponseSelectionExpression: $default
      Target: !Join ['/', [integrations, !Ref ClickCollectConnectInteg]] # See below
  # CONNECT ROUTE INTEGRATION.
  ClickCollectConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      Description: Integration for builtin $connect route
      IntegrationType: AWS
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketRouteConnect.Arn}/invocations
  # DISCONNECT ROUTE.
  ClickCollectDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      RouteKey: $disconnect
      OperationName: ClickCollectDisconnectRoute
      RouteResponseSelectionExpression: $default
      Target: !Join ['/', [integrations, !Ref ClickCollectDisconnectInteg]]
  # DISCONNECT ROUTE INTEGRATION.
  ClickCollectDisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      Description: Integration for builtin $disconnect route
      IntegrationType: AWS
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketRouteDisconnect.Arn}/invocations
  # DEFAULT ROUTE.
  ClickCollectDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      RouteKey: $default
      OperationName: ClickCollectDefaultRoute
      RouteResponseSelectionExpression: $default
      Target: !Join ['/', [integrations, !Ref ClickCollectDefaultInteg]]
  # DEFAULT ROUTE INTEGRATION.
  ClickCollectDefaultInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      Description: Integration for builtin $default route
      IntegrationType: MOCK
  # UPDATE_LOCATION ROUTE.
  ClickCollectUpdateLocationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      RouteKey: updateLocation
      OperationName: ClickCollectUpdateLocationRoute
      Target: !Join ['/', [integrations, !Ref ClickCollectUpdateLocationInteg]]
  # UPDATE_LOCATION ROUTE INTEGRATION
  ClickCollectUpdateLocationInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      Description: Pairing request integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketRouteUpdateLocation.Arn}/invocations

  # The validation model for 'pair' route messages.
  # NATPunchPairModel:
  #   Type: AWS::ApiGatewayV2::Model
  #   Properties:
  #     Name: NATPunchWebSocketPairModel # Must match ClickCollectUpdateLocationRoute.RequestModel value
  #     ApiId: !Ref ClickCollectWebsocket
  #     ContentType: application/json
  #     Schema:
  #       $schema: 'http://json-schema.org/draft-04/schema#'
  #       title: NATPunchPairModelSchema
  #       type: object
  #       properties:
  #         action:       {type: string, pattern: "pair"}
  #         pairing_name: {type: string, pattern: "[_a-z0-9]{1,255}"}
  #         limit:
  #           type: number
  #       required: [action, pairing_name]

  # ACCEPT_REQUEST ROUTE.
  ClickCollectAcceptRequestRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      RouteKey: acceptRequest
      OperationName: ClickCollectAcceptRequestRoute
      Target: !Join ['/', [integrations, !Ref ClickCollectAcceptRequestInteg]]
  # ACCEPT_REQUEST ROUTE INTEGRATION.
  ClickCollectAcceptRequestInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      Description: Integration for custom 'status' route
      IntegrationType: AWS
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketRouteAcceptRequest.Arn}/invocations
  # REQJECT_REQUEST ROUTE.
  ClickCollectRejectRequestRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      RouteKey: rejectRequest
      OperationName: ClickCollectRejectRequestRoute
      Target: !Join ['/', [integrations, !Ref ClickCollectRejectRequestInteg]]
  # REQJECT_REQUEST ROUTE INTEGRATION.
  ClickCollectRejectRequestInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      Description: Integration for custom 'status' route
      IntegrationType: AWS
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketRouteRejectRequest.Arn}/invocations
  # SUBMIT_ANSWERS ROUTE.
  ClickCollectSubmitAnswersRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      RouteKey: submitAnswers
      OperationName: ClickCollectSubmitAnswersRoute
      Target: !Join ['/', [integrations, !Ref ClickCollectSubmitAnswersInteg]]
  # SUBMIT_ANSWERS ROUTE INTEGRATION.
  ClickCollectSubmitAnswersInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      Description: Integration for custom 'status' route
      IntegrationType: AWS
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketRouteSubmitAnswers.Arn}/invocations
  # WEBSOCET API LAMBDA AUTHORIZER
  CognitoLambdaAuthorizer:
    Type: 'AWS::ApiGatewayV2::Authorizer'
    Properties:
      Name: CustomCognitoAuthorizer
      ApiId: !Ref ClickCollectWebsocket
      AuthorizerType: REQUEST
      # AuthorizerCredentialsArn: 
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaCognitoAuthorizer.Arn}/invocations
      IdentitySource:
        - route.request.querystring.Authorizer

  # NATPunch websocket deployment descriptor; see 'stage' below.
  ClickCollectWebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-deployment.html for
    # an explanation on why the routes below are listed as explicit dependencies for
    # the API's deployment in CloudFormation. This feels like a bug/hack; hopefully AWS
    # fixes it over time.
    DependsOn:
      - ClickCollectConnectRoute
      - ClickCollectDisconnectRoute
      - ClickCollectDefaultRoute
      - ClickCollectUpdateLocationRoute
      - ClickCollectAcceptRequestRoute
    Properties:
      ApiId: !Ref ClickCollectWebsocket

  # NATPunch websocket deployment stage descriptor; see 'deployment' above.
  ClickCollectWebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Sub '${Stage}'
      Description: !Sub '${Stage} traffic'
      DeploymentId: !Ref ClickCollectWebSocketDeployment
      ApiId: !Ref ClickCollectWebsocket
      DefaultRouteSettings:
        # DetailedMetricsEnabled: true
        LoggingLevel: INFO
        DataTraceEnabled: true
        #ThrottlingBurstLimit: 10 ... TODO, revisit later!
        #ThrottlingRateLimit: 10  ... TODO, revisit later!
      AccessLogSettings:
        DestinationArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:clickcollect-wss-access-logs'
        Format: >-
          '{"requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "caller":"$context.identity.caller",
          "user":"$context.identity.user","requestTime":"$context.requestTime",
          "eventType":"$context.eventType","routeKey":"$context.routeKey",
          "status":"$context.status","connectionId":"$context.connectionId"}'
  










  ######################
  # NESTED STACKS
  ######################
  # MongoDBAtlasStack: 
  #   Type: AWS::CloudFormation::Stack
  #   Properties: 
  #     TemplateURL: "https://s3.amazonaws.com/ali-su-mongodb-cloudformation/mongoDBAtlas-pack.yaml"


  ######################
  # EVENT BRIDGE
  ######################
  MongoDBEventBridge:
    Type: AWS::Events::EventBus
    # DependsOn:
    #   - MongoDBAtlasStack
    Properties: 
      # EventSourceName: !GetAtt MongoDBAtlasStack.Outputs.EventSourceName
      # Name: !GetAtt MongoDBAtlasStack.Outputs.EventSourceName
      EventSourceName: "aws.partner/mongodb.com/stitch.trigger/5ea164b7525542a0607d79b9"
      Name: "aws.partner/mongodb.com/stitch.trigger/5ea164b7525542a0607d79b9"
  searchPlayersEventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "search_for_players"
      EventBusName: !Ref MongoDBEventBridge
      EventPattern: 
        account: 
          - !Ref "AWS::AccountId"
      State: "ENABLED"
      Targets: 
        - Arn: !GetAtt matchPlayers.Arn
          Id: matchPlayers

  #######################
  # COGNITO
  #######################
  ClickCollectCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      AccountRecoverySetting:
         RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      # AdminCreateUserConfig: 
      #   InviteMessageTemplate: 
      #     EmailMessage: "Thanks for signing up with click&collect"
      #     EmailSubject: "Thankyou letter"
      AutoVerifiedAttributes: 
        - email
      AliasAttributes:
        - email
      # EmailVerificationMessage: "Please verify your email address by clicking on the provided link"
      # EmailVerificationSubject: "ClickCollect Email Verification"
      LambdaConfig: 
        PostConfirmation: !GetAtt CognitoInitializePlayer.Arn
      Policies: 
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      UsernameConfiguration: 
        CaseSensitive: true
      UserPoolName: click
      # UserPoolTags: '{"app": "ClickCollect"}'

  ClickCollectCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      ClientName: clickCollectCognitoUserPoolClient
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 1
      SupportedIdentityProviders: 
        - COGNITO
      UserPoolId: !Ref ClickCollectCognitoUserPool
  #######################
  # DYNAMO_DB TABLES
  #######################
  DynamodbRequestsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "_id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "_id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "requests"

  DynamodbGamesTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "_id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "_id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "games"

  DynamodbQuestionsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "_id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "_id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "questions"
          
  #######################
  # SQS RESOURCES
  #######################
  PendingRequestsQue:
    Type: AWS::SQS::Queue
    Properties: 
      # ContentBasedDeduplication: true
      # FifoQueue: true
      MessageRetentionPeriod: 86400
      QueueName: PendingRequests
      VisibilityTimeout: 300
  PendingGamesQue:
    Type: AWS::SQS::Queue
    Properties: 
      # ContentBasedDeduplication: true
      # FifoQueue: true
      MessageRetentionPeriod: 86400
      QueueName: PendingGames
      VisibilityTimeout: 300

  PendingResultsQue:
    Type: AWS::SQS::Queue
    Properties: 
      # ContentBasedDeduplication: true
      # FifoQueue: true
      MessageRetentionPeriod: 86400
      QueueName: PendingResults
      VisibilityTimeout: 300

  PendingTransferQue:
    Type: AWS::SQS::Queue
    Properties: 
      # ContentBasedDeduplication: true
      # FifoQueue: true
      MessageRetentionPeriod: 86400
      QueueName: PendingTransfer
      VisibilityTimeout: 300

  PendingQuestionsQue:
    Type: AWS::SQS::Queue
    Properties: 
      # ContentBasedDeduplication: true
      # FifoQueue: true
      MessageRetentionPeriod: 86400
      QueueName: PendingQuestions
      VisibilityTimeout: 300
  #######################
  # LAMBDA FUNCTIONS
  #######################
  #######################
  # CONNECT
  #######################
  WebSocketRouteConnect:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: webSocketRouteConnect
      Handler: connect.handler
      Runtime: nodejs12.x
      CodeUri: ./src/connect
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt MatchPlayersRole.Arn
      Environment:
        Variables:
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
          # MongoDBAtlasStack.Outputs.MongoDbURL
  WebSocketRouteDisconnect:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: webSocketRouteDisconnect
      Handler: disconnect.handler
      Runtime: nodejs12.x
      CodeUri: ./src/disconnect
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt MatchPlayersRole.Arn
      Environment:
        Variables:
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
          # MongoDBAtlasStack.Outputs.MongoDbURL
  CognitoInitializePlayer: 
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: cognitoInitializePlayer
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/initializePlayer
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt MatchPlayersRole.Arn
      Environment:
        Variables:
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
  LambdaCognitoInitializePlayerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CognitoInitializePlayer
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt ClickCollectCognitoUserPool.Arn
  WebSocketRouteUpdateLocation:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: webSocketRouteUpdateLocation
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/updateLocation
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt MatchPlayersRole.Arn
      Environment:
        Variables:
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
  WebSocketRouteAcceptRequest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: webSocketRouteAcceptRequest
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/acceptRequest
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt MatchPlayersRole.Arn
      Environment:
        Variables:
          DYNAMODB_REQUESTS_TABLE: !Ref DynamodbRequestsTable
  WebSocketRouteRejectRequest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: webSocketRouteRejectRequest
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/rejectRequest
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt MatchPlayersRole.Arn
      Environment:
        Variables:
          DYNAMODB_REQUESTS_TABLE: !Ref DynamodbRequestsTable
  WebSocketRouteSubmitAnswers:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: webSocketRouteSubmitAnswers
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/submitAnswers
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt MatchPlayersRole.Arn
      Environment:
        Variables:
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
          DYNAMODB_GAMES_TABLE: !Ref DynamodbGamesTable
  LambdaCognitoAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LambdaCognitoAuthorizer
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/cognitoAuthorizer
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt MatchPlayersRole.Arn
      Environment:
        Variables:
          KEYS_URL: !Sub "https://cognito-idp.us-east-1.amazonaws.com/${ClickCollectCognitoUserPool}/.well-known/jwks.json"
  
  LambdaCognitoAuthenticator:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LambdaCognitoAuthenticator
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/cognitoAuthenticator
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt MatchPlayersRole.Arn
      Environment:
        Variables:
          USER_POOL_ID: !Ref ClickCollectCognitoUserPool
  matchPlayers:
    Type: AWS::Serverless::Function
    DependsOn:
      - FetchLambdaCodeFromS3
    Properties:
      FunctionName: matchPlayers
      Handler: matchPlayers.handler
      Runtime: nodejs12.x
      CodeUri: ./src/matchPlayers
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt MatchPlayersRole.Arn
      Environment:
        Variables:
          DYNAMODB_REQUESTS_TABLE: requests
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
          MAX_DISTANCE: 100
          SQS_REQUEST_QUE_URL: !Ref PendingRequestsQue
          WEBSOCKET_API_ENDPOINT: !Sub "https://${ClickCollectWebsocket}.execute-api.${AWS::Region}.amazonaws.com/${ClickCollectWebSocketStage}/@connections"
  acceptRequest:
    Type: AWS::Serverless::Function
    DependsOn:
      - FetchLambdaCodeFromS3
    Properties:
      FunctionName: acceptRequest
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/acceptRequest
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt MatchPlayersRole.Arn
      Environment:
        Variables:
          API_GATEWAY_REGION: us-east-1
          DYNAMODB_REQUESTS_TABLE: requests
          # MongoDBAtlasStack.Outputs.MongoDbURL
          PLAYERS_DISTANCE: "100"
          SQS_PENDINGREQUESTS_URL: !Ref PendingRequestsQue
          WEBSOCKET_API_ENDPOINT: !Sub "https://${ClickCollectWebsocket}.execute-api.${AWS::Region}.amazonaws.com/${ClickCollectWebSocketStage}/@connections"
          KEYS_URL: "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_5i9hLQyTN/.well-known/jwks.json"
      # Events:
      #   searchPlayersEventRule:
      #     Type: EventBridgeRule
      #     Properties:
      #       EventBusName: !Ref MongoDBEventBridge
      #       Pattern:   
      #         account: 
      #           - !Ref "AWS::AccountId"

  ProcessPendingGames:
    Type: AWS::Serverless::Function
    DependsOn:
      - FetchLambdaCodeFromS3
    Properties:
      FunctionName: processPendingGames
      Handler: processPendingGames.handler
      Runtime: nodejs12.x
      CodeUri: ./src/processPendingGames
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt MatchPlayersRole.Arn
      Environment:
        Variables:
          DYNAMODB_GAMES_TABLE: !Ref DynamodbGamesTable
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
          SCHEDULED_QUESTIONS_QUE_URL: !Ref PendingGamesQue
          WEBSOCKET_API_ENDPOINT: !Sub "https://${ClickCollectWebsocket}.execute-api.${AWS::Region}.amazonaws.com/${ClickCollectWebSocketStage}/@connections"

  ProcessPendingRequest:
    Type: AWS::Serverless::Function
    DependsOn:
      - FetchLambdaCodeFromS3
    Properties:
      FunctionName: processPendingRequests
      Handler: processPendingRequests.handler
      Runtime: nodejs12.x
      CodeUri: ./src/processPendingRequests
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt MatchPlayersRole.Arn
      Environment:
        Variables:
          QUESTIONS_LIMIT: 5
          DYNAMODB_GAMES_TABLE: !Ref DynamodbGamesTable
          DYNAMODB_REQUESTS_TABLE: !Ref DynamodbRequestsTable

  ProcessPointsTransfer:
    Type: AWS::Serverless::Function
    DependsOn:
      - FetchLambdaCodeFromS3
    Properties:
      FunctionName: processPointsTransfer
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/processPointsTransfer
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt MatchPlayersRole.Arn
      Environment:
        Variables:
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority

  ProcessResults:
    Type: AWS::Serverless::Function
    DependsOn:
      - FetchLambdaCodeFromS3
    Properties:
      FunctionName: processResults
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/processResults
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt MatchPlayersRole.Arn
      Environment:
        Variables:
          DYNAMODB_GAMES_TABLE: !Ref DynamodbGamesTable
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
          PENDING_POINTS_TRANSFERS_QUE_URL: !Ref PendingTransferQue
          WEBSOCKET_API_ENDPOINT: !Sub "https://${ClickCollectWebsocket}.execute-api.${AWS::Region}.amazonaws.com/${ClickCollectWebSocketStage}/@connections"

  ProcessScheduledQuestions:
    Type: AWS::Serverless::Function
    DependsOn:
      - FetchLambdaCodeFromS3
    Properties:
      FunctionName: processScheduledQuestions
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/processScheduledQuestions
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt MatchPlayersRole.Arn
      Environment:
        Variables:
          DYNAMODB_GAMES_TABLE: !Ref DynamodbGamesTable
          SCHEDULED_QUESTIONS_QUE_URL: !Ref PendingQuestionsQue
          SCHEDULE_RESULTS_PROCESS_QUE_URL: !Ref PendingResultsQue
  #######################
  # FUNCTION LAYERS
  #######################
  serverlessLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: serverlessLayer
      Description: Layer description
      ContentUri: './src/opt'
      CompatibleRuntimes:
        - nodejs12.x
        - nodejs8.10
      LicenseInfo: 'Available under the MIT-0 license.'
      RetentionPolicy: Retain
  #######################
  # LAMBDA PERMISSIONS
  #######################
  # MongoDBEventRulePermissions:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !GetAtt matchPlayers.Arn
  #     Action: lambda:InvokeFunction
  #     Principal: events.amazonaws.com
  #     SourceArn: !GetAtt searchPlayersEventRule.Arn
  # API GATEWY CONNECT INTEGRATION PERMISSIONS
  ClickCollectConnectIntegPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketRouteConnect
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClickCollectWebsocket}/*/$connect"
  # API GATEWY CONNECT INTEGRATION PERMISSIONS
  ClickCollectDisconnectIntegPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketRouteDisconnect
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClickCollectWebsocket}/*/$disconnect"
  # API GATEWY UPDATE_LOCATION INTEGRATION PERMISSIONS
  ClickCollectUpdateLocationIntegPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketRouteUpdateLocation
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClickCollectWebsocket}/*/updateLocation"
  # API GATEWY ACCEPT_REQUEST INTEGRATION PERMISSIONS
  ClickCollectAcceptRequestPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketRouteAcceptRequest
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClickCollectWebsocket}/*/acceptRequest"
  # API GATEWY REJECT_REQUEST INTEGRATION PERMISSIONS
  ClickCollectRejectRequestIntegPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketRouteRejectRequest
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClickCollectWebsocket}/*/rejectRequest"
  # API GATEWY SUBMIT_ANSWERS INTEGRATION PERMISSIONS
  ClickCollectSubmitAnswersIntegPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketRouteSubmitAnswers
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClickCollectWebsocket}/*/submitAnswers"
  # API GATEWY SUBMIT_ANSWERS INTEGRATION PERMISSIONS
  LambdaCognitoAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaCognitoAuthorizer
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClickCollectWebsocket}/authorizers/${CognitoLambdaAuthorizer}"
  #######################
  # IAM ROLES
  #######################
  MatchPlayersRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaBasicExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              Effect: "Allow"
              Action: 
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
      Path: "/" 
  ClickCollectWebsocketRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaBasicExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              Effect: "Allow"
              Action: 
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
      Path: "/" 
  ClickCollectWebsocketLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
  #######################
  # IAM POLICIES
  #######################    
  FetchLambdaCodeFromS3: 
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: FetchLambdaCodeFromS3
      Roles:
        - !Ref MatchPlayersRole
      PolicyDocument: 
        Version: '2012-10-17' 
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectACL
            Resource: 'arn:aws:s3:::ali-serverless-architecture/*'

Outputs:
  ClickCollectRestApiInvokeURL:
      Value: !Sub "https://${ClickCollectRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ClickCollectRestApiStageName}"
  


