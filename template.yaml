 
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A Node.js web service deployed to AWS Lambda.
Parameters:
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: production
  RestApiName:
    Type: String
    Default: clickCollectionRestApi
  ClickCollectRestApiStageName:
    Type: String
    Default: production
Resources:

  #######################
  # API GATEWAY REST
  #######################
  ClickCollectRestApi: 
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "Click&Collect REST API"
      Description: "handle all non-websocket routes"
  SignUp:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ClickCollectRestApi
      PathPart: signup
      ParentId: !GetAtt ClickCollectRestApi.RootResourceId
  ClickCollectRestApiSignUpMethod: 
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Uri: !Sub
              - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
              - { lambdaArn: !GetAtt "LambdaSignUp.Arn"}
      ResourceId: !Ref SignUp
      RestApiId: !Ref "ClickCollectRestApi"
  SignIn:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ClickCollectRestApi
      PathPart: signin
      ParentId: !GetAtt ClickCollectRestApi.RootResourceId
  ClickCollectRestApiSignInMethod: 
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Uri: !Sub
              - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
              - { lambdaArn: !GetAtt "LambdaCognitoAuthenticator.Arn" }
      ResourceId: !Ref SignIn
      RestApiId: !Ref "ClickCollectRestApi"

  ClickCollectRestApiDeployment: 
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "ClickCollectRestApiSignUpMethod"
      - "ClickCollectRestApiSignInMethod"
    Properties:
      RestApiId: !Ref "ClickCollectRestApi"
      StageName: !Ref ClickCollectRestApiStageName
  signUpGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaSignUp}"
      RetentionInDays: 90
  
  #######################
  # API GATEWAY WEBSOCKET
  #######################
  ApiGwAccountConfig:
    DependsOn:
      - ClickCollectWebsocket
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "ClickCollectWebsocketLoggingRole.Arn"
  # The top-level websocket itself
  ClickCollectWebsocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ClickCollectWebsocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.message"
      CredentialsArn: !GetAtt ClickCollectWebsocketRole.Arn
  ClickCollectWebsocketRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaBasicExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              Effect: "Allow"
              Action: 
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
      Path: "/" 
  ClickCollectWebsocketLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
  # CONNECT ROUTE.
  ClickCollectConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref CognitoLambdaAuthorizer
      OperationName: ClickCollectConnectRoute
      # RouteResponseSelectionExpression: $default
      Target: !Join ['/', [integrations, !Ref ClickCollectConnectInteg]] # See below
  # CONNECT ROUTE INTEGRATION.
  ClickCollectConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      Description: Integration for builtin $connect route
      IntegrationType: AWS
      IntegrationUri: !Sub 
                        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
                        - {Function: !GetAtt WebSocketRouteConnect.Arn}
      TemplateSelectionExpression: '200'
      RequestTemplates:
        '200': >
          {
              "userEmail": "$context.authorizer.userEmail",
              "connectionId": "$context.connectionId",
              "connectionType": "$context.connectionType"
          }
  # DISCONNECT ROUTE.
  ClickCollectDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      RouteKey: $disconnect
      OperationName: ClickCollectDisconnectRoute
      RouteResponseSelectionExpression: $default
      Target: !Join ['/', [integrations, !Ref ClickCollectDisconnectInteg]]
  # DISCONNECT ROUTE INTEGRATION.
  ClickCollectDisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      Description: Integration for builtin $disconnect route
      IntegrationType: AWS
      IntegrationUri: !Sub 
                        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
                        - { Function: !GetAtt WebSocketRouteDisconnect.Arn}
      TemplateSelectionExpression: '200'
      RequestTemplates:
        '200': >
          {
              "userEmail": "$context.authorizer.userEmail",
              "connectionId": "$context.connectionId",
              "connectionType": "$context.connectionType"
          }
  # DEFAULT ROUTE.
  ClickCollectDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      RouteKey: $default
      OperationName: ClickCollectDefaultRoute
      RouteResponseSelectionExpression: $default
      Target: !Join ['/', [integrations, !Ref ClickCollectDefaultInteg]]
  # DEFAULT ROUTE INTEGRATION.
  ClickCollectDefaultInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      Description: Integration for builtin $default route
      IntegrationType: MOCK
  # UPDATE_LOCATION ROUTE.
  ClickCollectUpdateLocationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      RouteKey: updateLocation
      OperationName: ClickCollectUpdateLocationRoute
      Target: !Join ['/', [integrations, !Ref ClickCollectUpdateLocationInteg]]
  # UPDATE_LOCATION ROUTE INTEGRATION
  ClickCollectUpdateLocationInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      Description: Pairing request integration
      IntegrationType: AWS
      IntegrationUri: !Sub
                        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
                        - {Function: !GetAtt LambdaWebSocketRouteUpdateLocation.Arn}

  # The validation model for 'pair' route messages.
  # NATPunchPairModel:
  #   Type: AWS::ApiGatewayV2::Model
  #   Properties:
  #     Name: NATPunchWebSocketPairModel # Must match ClickCollectUpdateLocationRoute.RequestModel value
  #     ApiId: !Ref ClickCollectWebsocket
  #     ContentType: application/json
  #     Schema:
  #       $schema: 'http://json-schema.org/draft-04/schema#'
  #       title: NATPunchPairModelSchema
  #       type: object
  #       properties:
  #         action:       {type: string, pattern: "pair"}
  #         pairing_name: {type: string, pattern: "[_a-z0-9]{1,255}"}
  #         limit:
  #           type: number
  #       required: [action, pairing_name]

  # ACCEPT_REQUEST ROUTE.
  ClickCollectAcceptRequestRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      RouteKey: acceptRequest
      OperationName: ClickCollectAcceptRequestRoute
      Target: !Join ['/', [integrations, !Ref ClickCollectAcceptRequestInteg]]
  # ACCEPT_REQUEST ROUTE INTEGRATION.
  ClickCollectAcceptRequestInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      Description: Integration for custom 'status' route
      IntegrationType: AWS
      IntegrationUri: !Sub
                        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
                        - { Function: !GetAtt WebSocketRouteAcceptRequest.Arn }
      TemplateSelectionExpression: '200'
      RequestTemplates:
        '200': >
          #set($inputRoot = $input.path('$'))
          {
            "connectionId" : "$context.connectionId"
            "connectionType" : "$context.connectionType",
            "requestId" : "$inputRoot.data.requestId",
            "token": "$inputRoot.token"
          }
        
  # REQJECT_REQUEST ROUTE.
  ClickCollectRejectRequestRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      RouteKey: rejectRequest
      OperationName: ClickCollectRejectRequestRoute
      Target: !Join ['/', [integrations, !Ref ClickCollectRejectRequestInteg]]
  # REQJECT_REQUEST ROUTE INTEGRATION.
  ClickCollectRejectRequestInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      Description: Integration for custom 'status' route
      IntegrationType: AWS
      IntegrationUri: !Sub
                        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
                        - { Function: !GetAtt WebSocketRouteRejectRequest.Arn }
      TemplateSelectionExpression: '200'
      RequestTemplates:
        '200': >
          #set($inputRoot = $input.path('$'))
          {
            "connectionId" : "$context.connectionId"
            "connectionType" : "$context.connectionType",
            "requestId" : "$inputRoot.data.requestId",
            "token": "$inputRoot.token"
          }
  # SUBMIT_ANSWERS ROUTE.
  ClickCollectSubmitAnswersRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      RouteKey: submitAnswers
      OperationName: ClickCollectSubmitAnswersRoute
      Target: !Join ['/', [integrations, !Ref ClickCollectSubmitAnswersInteg]]
  # SUBMIT_ANSWERS ROUTE INTEGRATION.
  ClickCollectSubmitAnswersInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      Description: Integration for custom 'status' route
      IntegrationType: AWS
      IntegrationUri: !Sub
                        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations
                        - {Function: !GetAtt LambdaWebSocketRouteSubmitAnswers.Arn}
  # WEBSOCET API LAMBDA AUTHORIZER
  CognitoLambdaAuthorizer:
    Type: 'AWS::ApiGatewayV2::Authorizer'
    Properties:
      Name: CustomCognitoAuthorizer
      ApiId: !Ref ClickCollectWebsocket
      AuthorizerType: REQUEST
      # AuthorizerCredentialsArn: 
      AuthorizerUri: !Sub
                        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Authorizer}/invocations
                        - {Authorizer: !GetAtt LambdaCognitoAuthorizer.Arn}
      IdentitySource:
        - route.request.querystring.Authorizer

  # NATPunch websocket deployment descriptor; see 'stage' below.
  ClickCollectWebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-deployment.html for
    # an explanation on why the routes below are listed as explicit dependencies for
    # the API's deployment in CloudFormation. This feels like a bug/hack; hopefully AWS
    # fixes it over time.
    DependsOn:
      - ClickCollectConnectRoute
      - ClickCollectDisconnectRoute
      - ClickCollectDefaultRoute
      - ClickCollectUpdateLocationRoute
      - ClickCollectAcceptRequestRoute
    Properties:
      ApiId: !Ref ClickCollectWebsocket
      # StageName: !Ref Stage

  # NATPunch websocket deployment stage descriptor; see 'deployment' above.
  ClickCollectWebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Sub '${Stage}'
      Description: !Sub '${Stage} traffic'
      DeploymentId: !Ref ClickCollectWebSocketDeployment
      ApiId: !Ref ClickCollectWebsocket
      DefaultRouteSettings:
        # DetailedMetricsEnabled: true
        LoggingLevel: INFO
        DataTraceEnabled: true
        #ThrottlingBurstLimit: 10 ... TODO, revisit later!
        #ThrottlingRateLimit: 10  ... TODO, revisit later!
      AccessLogSettings:
        DestinationArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:clickcollect-wss-access-logs'
        Format: >-
          '{"requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "caller":"$context.identity.caller",
          "user":"$context.identity.user","requestTime":"$context.requestTime",
          "eventType":"$context.eventType","routeKey":"$context.routeKey",
          "status":"$context.status","connectionId":"$context.connectionId"}'
  



  ######################
  # NESTED STACKS
  ######################
  # MongoDBAtlasStack: 
  #   Type: AWS::CloudFormation::Stack
  #   Properties: 
  #     TemplateURL: "https://s3.amazonaws.com/ali-su-mongodb-cloudformation/mongoDBAtlas-pack.yaml"


  ######################
  # EVENT BRIDGE
  ######################
  MongoDBEventBridge:
    Type: AWS::Events::EventBus
    # DependsOn:
    #   - MongoDBAtlasStack
    Properties: 
      # EventSourceName: !GetAtt MongoDBAtlasStack.Outputs.EventSourceName
      # Name: !GetAtt MongoDBAtlasStack.Outputs.EventSourceName
      EventSourceName: "aws.partner/mongodb.com/stitch.trigger/5ea164b7525542a0607d79b9"
      Name: "aws.partner/mongodb.com/stitch.trigger/5ea164b7525542a0607d79b9"
  searchPlayersEventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "search_for_players"
      EventBusName: !Ref MongoDBEventBridge
      EventPattern: 
        account: 
          - !Ref "AWS::AccountId"
      State: "ENABLED"
      Targets: 
        - Arn: !GetAtt LambdaMatchPlayers.Arn
          Id: LambdaMatchPlayers

  #######################
  # COGNITO
  #######################
  ClickCollectCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      AccountRecoverySetting:
         RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      # AdminCreateUserConfig: 
      #   InviteMessageTemplate: 
      #     EmailMessage: "Thanks for signing up with click&collect"
      #     EmailSubject: "Thankyou letter"
      AutoVerifiedAttributes: 
        - email
      AliasAttributes:
        - email
      # EmailVerificationMessage: "Please verify your email address by clicking on the provided link"
      # EmailVerificationSubject: "ClickCollect Email Verification"
      LambdaConfig: 
        PostConfirmation: !GetAtt CognitoInitializePlayer.Arn
      Policies: 
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      UsernameConfiguration: 
        CaseSensitive: true
      UserPoolName: click
      # UserPoolTags: '{"app": "ClickCollect"}'

  ClickCollectCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      ClientName: clickCollectCognitoUserPoolClient
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 1
      SupportedIdentityProviders: 
        - COGNITO
      UserPoolId: !Ref ClickCollectCognitoUserPool
  #######################
  # DYNAMO_DB TABLES
  #######################
  DynamodbRequestsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "_id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "_id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "requests"

  DynamodbGamesTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "_id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "_id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "games"
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  DynamodbQuestionsTable: 
    Type: AWS::DynamoDB::Table
    # BillingMode: PAY_PER_REQUEST
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "_id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "_id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "questions"
          
  #######################
  # SQS RESOURCES
  #######################
  PendingRequestsQue:
    Type: AWS::SQS::Queue
    Properties: 
      # ContentBasedDeduplication: true
      # FifoQueue: true
      MessageRetentionPeriod: 86400
      QueueName: PendingRequests
      VisibilityTimeout: 300
  PendingGamesQue:
    Type: AWS::SQS::Queue
    Properties: 
      # ContentBasedDeduplication: true
      # FifoQueue: true
      MessageRetentionPeriod: 86400
      QueueName: PendingGames
      VisibilityTimeout: 300

  PendingResultsQue:
    Type: AWS::SQS::Queue
    Properties: 
      # ContentBasedDeduplication: true
      # FifoQueue: true
      MessageRetentionPeriod: 86400
      QueueName: PendingResults
      VisibilityTimeout: 300

  PendingTransferQue:
    Type: AWS::SQS::Queue
    Properties: 
      # ContentBasedDeduplication: true
      # FifoQueue: true
      MessageRetentionPeriod: 86400
      QueueName: PendingTransfer
      VisibilityTimeout: 300

  PendingQuestionsQue:
    Type: AWS::SQS::Queue
    Properties: 
      # ContentBasedDeduplication: true
      # FifoQueue: true
      MessageRetentionPeriod: 86400
      QueueName: PendingQuestions
      VisibilityTimeout: 300
  #######################
  # LAMBDA FUNCTIONS
  #######################
  #######################
  # CONNECT
  #######################
  WebSocketRouteConnect:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaBasicExecutionPolicy
    Properties:
      FunctionName: webSocketRouteConnect
      Handler: connect.handler
      Runtime: nodejs12.x
      CodeUri: ./src/connect
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt WebSocketRouteConnectRole.Arn
      Environment:
        Variables:
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
          # MongoDBAtlasStack.Outputs.MongoDbURL
  ClickCollectConnectIntegPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketRouteConnect
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClickCollectWebsocket}/*/$connect"
  WebSocketRouteConnectRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"

  WebSocketRouteDisconnect:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaBasicExecutionPolicy
    Properties:
      FunctionName: webSocketRouteDisconnect
      Handler: disconnect.handler
      Runtime: nodejs12.x
      CodeUri: ./src/disconnect
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt WebSocketRouteDisconnectRole.Arn
      Environment:
        Variables:
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
          # MongoDBAtlasStack.Outputs.MongoDbURL
  WebSocketRouteDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketRouteDisconnect
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClickCollectWebsocket}/*/$disconnect"
  WebSocketRouteDisconnectRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"

  CognitoInitializePlayer: 
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaBasicExecutionPolicy
    Properties:
      FunctionName: cognitoInitializePlayer
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/initializePlayer
      Layers:
        - Ref: serverlessLayer
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt CognitoInitializePlayerRole.Arn
      Environment:
        Variables:
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
  CognitoInitializePlayerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CognitoInitializePlayer
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt ClickCollectCognitoUserPool.Arn
  CognitoInitializePlayerRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
  LambdaWebSocketRouteUpdateLocation:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaBasicExecutionPolicy
    Properties:
      FunctionName: LambdaWebSocketRouteUpdateLocation
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/updateLocation
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt LambdaWebSocketRouteUpdateLocationRole.Arn
      Environment:
        Variables:
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
  LambdaWebSocketRouteUpdateLocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaWebSocketRouteUpdateLocation
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClickCollectWebsocket}/*/updateLocation"
  LambdaWebSocketRouteUpdateLocationRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/" 

  WebSocketRouteAcceptRequest:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaBasicExecutionPolicy
    Properties:
      FunctionName: webSocketRouteAcceptRequest
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/acceptRequest
      Layers:
        - Ref: serverlessLayer
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt WebSocketRouteAcceptRequestRole.Arn
      Environment:
        Variables:
          DYNAMODB_REQUESTS_TABLE: !Ref DynamodbRequestsTable
  WebSocketRouteAcceptRequestPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketRouteAcceptRequest
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClickCollectWebsocket}/*/acceptRequest"
  WebSocketRouteAcceptRequestRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: DynamodbRequestsTableWriteAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              Effect: "Allow"
              Action: 
                - dynamodb:UpdateItem
              Resource: !GetAtt DynamodbRequestsTable.Arn
      Path: "/" 
  WebSocketRouteRejectRequest:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaBasicExecutionPolicy
    Properties:
      FunctionName: webSocketRouteRejectRequest
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/rejectRequest
      Layers:
        - Ref: serverlessLayer
      Timeout: 3
      Role: !GetAtt WebSocketRouteRejectRequestRole.Arn
      MemorySize: 128
      Environment:
        Variables:
          DYNAMODB_REQUESTS_TABLE: !Ref DynamodbRequestsTable
  ClickCollectRejectRequestIntegPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketRouteRejectRequest
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClickCollectWebsocket}/*/rejectRequest"

  WebSocketRouteRejectRequestRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: DynamodbRequestsTableWriteAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              Effect: "Allow"
              Action: 
                - dynamodb:UpdateItem
              Resource: !GetAtt DynamodbRequestsTable.Arn
      Path: "/" 
  LambdaWebSocketRouteSubmitAnswers:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaBasicExecutionPolicy
    Properties:
      FunctionName: LambdaWebSocketRouteSubmitAnswers
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/submitAnswers
      Layers:
        - Ref: serverlessLayer
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt LambdaWebSocketRouteSubmitAnswersRole.Arn
      Environment:
        Variables:
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
          DYNAMODB_GAMES_TABLE: !Ref DynamodbGamesTable
  LambdaWebSocketRouteSubmitAnswersPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaWebSocketRouteSubmitAnswers
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClickCollectWebsocket}/*/submitAnswers"
  LambdaWebSocketRouteSubmitAnswersRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: DynamodbGamesTableWriteAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              Effect: "Allow"
              Action: 
                - dynamodb:UpdateItem
              Resource: !GetAtt DynamodbGamesTable.Arn
      Path: "/" 
  
  LambdaCognitoAuthorizer:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaBasicExecutionPolicy
    Properties:
      FunctionName: LambdaCognitoAuthorizer
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/cognitoAuthorizer
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt LambdaCognitoAuthorizerRole.Arn
      Environment:
        Variables:
          KEYS_URL: !Sub "https://cognito-idp.us-east-1.amazonaws.com/${ClickCollectCognitoUserPool}/.well-known/jwks.json"
  LambdaCognitoAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaCognitoAuthorizer
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClickCollectWebsocket}/authorizers/${CognitoLambdaAuthorizer}"
  LambdaCognitoAuthorizerRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/" 
  LambdaSignUp: 
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaBasicExecutionPolicy
    Properties:
      CodeUri: ./src/cognitoSignUp
      Description: "Sign user up by creating a new record in the cognito user pool.."
      FunctionName: "cognitoSignUp"
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt "LambdaSignUpRole.Arn"
      Runtime: nodejs12.x
      Timeout: 10
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Environment:
        Variables:
          USER_POOL_ID: !Ref ClickCollectCognitoUserPool
          USER_POOL_CLIENT_ID: !Ref ClickCollectCognitoUserPoolClient

  LambdaSignUpPermission: 
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaSignUp.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClickCollectRestApi}/*/POST/signup"

  LambdaSignUpRole: 
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: "AmazonCognitoDeveloperAuthenticatedIdentities"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "cognito-identity:GetOpenIdTokenForDeveloperIdentity"
                  - "cognito-identity:LookupDeveloperIdentity"
                  - "cognito-identity:MergeDeveloperIdentities"
                  - "cognito-identity:UnlinkDeveloperIdentity"
                Effect: "Allow"
                Resource: "*"
  LambdaCognitoAuthenticator:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaBasicExecutionPolicy
    Properties:
      FunctionName: LambdaCognitoAuthenticator
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/cognitoAuthenticator
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt LambdaCognitoAuthenticatorRole.Arn
      Environment:
        Variables:
          USER_POOL_ID: !Ref ClickCollectCognitoUserPool
  LambdaCognitoAuthenticatorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaCognitoAuthorizer
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClickCollectRestApi}/*/POST/login"
      
  LambdaCognitoAuthenticatorRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/" 
  LambdaMatchPlayers:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaBasicExecutionPolicy
    Properties:
      FunctionName: LambdaMatchPlayers
      Handler: matchPlayers.handler
      Runtime: nodejs12.x
      CodeUri: ./src/matchPlayers
      Layers:
        - Ref: serverlessLayer
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt LambdaMatchPlayersRole.Arn
      Environment:
        Variables:
          DYNAMODB_REQUESTS_TABLE: requests
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
          MAX_DISTANCE: 100
          SQS_REQUEST_QUE_URL: !Ref PendingRequestsQue
          WEBSOCKET_API_ENDPOINT: !Sub "https://${ClickCollectWebsocket}.execute-api.${AWS::Region}.amazonaws.com/${ClickCollectWebSocketStage}/@connections"
  LambdaMatchPlayersPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaMatchPlayers.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt searchPlayersEventRule.Arn
  LambdaMatchPlayersRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "AmazonSqsWriteAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "sqs:*"
                Effect: "Allow"
                Resource: !GetAtt PendingRequestsQue.Arn
      Policies:
        - PolicyName: DynamodbRequestsTableWriteAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              Effect: "Allow"
              Action: 
                - dynamodb:UpdateItem
              Resource: !GetAtt DynamodbRequestsTable.Arn
      Policies:
        - PolicyName: ApiGatewayWebsocketInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              Effect: "Allow"
              Action: 
                - "execute-api:Invoke"
                - "execute-api:ManageConnections"
              Resource: !Sub "arn:aws:apigateway:${AWS::Region}::*"
      Path: "/" 

  LambdaProcessPendingGames:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaBasicExecutionPolicy
    Properties:
      FunctionName: processPendingGames
      Handler: processPendingGames.handler
      Runtime: nodejs12.x
      CodeUri: ./src/processPendingGames
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt LambdaProcessPendingGamesRole.Arn
      Environment:
        Variables:
          DYNAMODB_GAMES_TABLE: !Ref DynamodbGamesTable
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
          SCHEDULED_QUESTIONS_QUE_URL: !Ref PendingGamesQue
          WEBSOCKET_API_ENDPOINT: !Sub "https://${ClickCollectWebsocket}.execute-api.${AWS::Region}.amazonaws.com/${ClickCollectWebSocketStage}/@connections"
  LambdaProcessPendingGamesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaProcessPendingGames
      Principal: dynamodb.amazonaws.com
      SourceArn: !GetAtt DynamodbGamesTable.StreamArn
  LambdaProcessPendingGamesRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "AmazonSqsWriteAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "sqs:*"
                Effect: "Allow"
                Resource: !GetAtt PendingGamesQue.Arn
      Policies:
        - PolicyName: DynamodbGamesTableWriteAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              Effect: "Allow"
              Action: 
                - dynamodb:UpdateItem
              Resource: !GetAtt DynamodbGamesTable.Arn
      Policies:
        - PolicyName: ApiGatewayWebsocketInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              Effect: "Allow"
              Action: 
                - "execute-api:Invoke"
                - "execute-api:ManageConnections"
              Resource: !Sub "arn:aws:apigateway:${AWS::Region}::*"
      Policies:
        - PolicyName: ApiGatewayWebsocketInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              Effect: "Allow"
              Action: 
                - "dynamodb:DescribeStream"
                - "dynamodb:GetRecords"
                - "dynamodb:GetShardIterator"
                - "dynamodb:ListStreams"
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: !GetAtt DynamodbGamesTable.Arn
      Path: "/" 

  LambdaProcessPendingRequests:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaBasicExecutionPolicy
    Properties:
      FunctionName: processPendingRequests
      Handler: processPendingRequests.handler
      Runtime: nodejs12.x
      CodeUri: ./src/processPendingRequests
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt LambdaProcessPendingRequestsRole.Arn
      Environment:
        Variables:
          QUESTIONS_LIMIT: 5
          DYNAMODB_GAMES_TABLE: !Ref DynamodbGamesTable
          DYNAMODB_REQUESTS_TABLE: !Ref DynamodbRequestsTable
  LambdaProcessPendingRequestsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaProcessPendingRequests
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt PendingRequestsQue.Arn
  LambdaProcessPendingRequestsRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "AmazonSqsWriteAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "sqs:*"
                Effect: "Allow"
                Resource: !GetAtt PendingGamesQue.Arn
      Policies:
        - PolicyName: DynamodbGamesTableWriteAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              Effect: "Allow"
              Action: 
                - dynamodb:PutItem
              Resource: !GetAtt DynamodbGamesTable.Arn
      Policies:
        - PolicyName: DynamodbRequestsTableReadAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              Effect: "Allow"
              Action: 
                - dynamodb:GetItem
              Resource: !GetAtt DynamodbRequestsTable.Arn
      Path: "/" 

  LambdaProcessPointsTransfer:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaBasicExecutionPolicy
    Properties:
      FunctionName: processPointsTransfer
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/processPointsTransfer
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt LambdaProcessPointsTransferRole.Arn
      Environment:
        Variables:
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
  LambdaProcessResultsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaProcessResults
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt PendingTransferQue.Arn
  LambdaProcessPointsTransferRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
  LambdaProcessResults:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaBasicExecutionPolicy
    Properties:
      FunctionName: processResults
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/processResults
      # ReservedConcurrentExecutions: 30
      Layers:
        - Ref: serverlessLayer
      # Tracing: Active
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt LambdaProcessResultsRole.Arn
      Environment:
        Variables:
          DYNAMODB_GAMES_TABLE: !Ref DynamodbGamesTable
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
          PENDING_POINTS_TRANSFERS_QUE_URL: !Ref PendingTransferQue
          WEBSOCKET_API_ENDPOINT: !Sub "https://${ClickCollectWebsocket}.execute-api.${AWS::Region}.amazonaws.com/${ClickCollectWebSocketStage}/@connections"
  LambdaProcessResultsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaProcessResults
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt PendingResultsQue.Arn
  LambdaProcessResultsRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "AmazonSqsWriteAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "sqs:*"
                Effect: "Allow"
                Resource: !GetAtt PendingTransferQue.Arn
      Policies:
        - PolicyName: DynamodbGamesTableReadAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              Effect: "Allow"
              Action: 
                - dynamodb:GetItem
              Resource: !GetAtt DynamodbGamesTable.Arn
      Policies:
        - PolicyName: ApiGatewayWebsocketInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              Effect: "Allow"
              Action: 
                - "execute-api:Invoke"
                - "execute-api:ManageConnections"
              Resource: !Sub "arn:aws:apigateway:${AWS::Region}::*"
      Path: "/" 
  LambdaProcessScheduledQuestions:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaBasicExecutionPolicy
    Properties:
      FunctionName: processScheduledQuestions
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ./src/processScheduledQuestions
      Layers:
        - Ref: serverlessLayer
      Timeout: 3
      MemorySize: 128
      Role: !GetAtt LambdaProcessScheduledQuestionsRole.Arn
      Environment:
        Variables:
          DYNAMODB_GAMES_TABLE: !Ref DynamodbGamesTable
          SCHEDULED_QUESTIONS_QUE_URL: !Ref PendingQuestionsQue
          SCHEDULE_RESULTS_PROCESS_QUE_URL: !Ref PendingResultsQue
          MONGO_DB_URI: mongodb+srv://admin:extra4545@cluster0-xebut.mongodb.net/test?retryWrites=true&w=majority
          WEBSOCKET_API_ENDPOINT: !Sub "https://${ClickCollectWebsocket}.execute-api.${AWS::Region}.amazonaws.com/${ClickCollectWebSocketStage}/@connections"
  LambdaProcessScheduledQuestionsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaProcessScheduledQuestions
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt PendingQuestionsQue.Arn
  LambdaProcessScheduledQuestionsRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "AmazonSqsWriteAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "sqs:*"
                Effect: "Allow"
                Resource: !GetAtt PendingResultsQue.Arn
      Policies:
        - PolicyName: "AmazonSqsWriteAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "sqs:*"
                Effect: "Allow"
                Resource: !GetAtt PendingQuestionsQue.Arn
      Policies:
        - PolicyName: DynamodbGamesTableReadWriteAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              Effect: "Allow"
              Action: 
                - dynamodb:UpdateItem
                - dynamodb:GetItem
              Resource: !GetAtt DynamodbGamesTable.Arn
      Policies:
        - PolicyName: ApiGatewayWebsocketInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              Effect: "Allow"
              Action: 
                - "execute-api:Invoke"
                - "execute-api:ManageConnections"
              Resource: !Sub "arn:aws:apigateway:${AWS::Region}::*"
      Path: "/" 
  #######################
  # FUNCTION LAYERS
  #######################
  serverlessLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: serverlessLayer
      Description: Layer description
      ContentUri: './src/opt'
      CompatibleRuntimes:
        - nodejs12.x
        - nodejs8.10
      LicenseInfo: 'Available under the MIT-0 license.'
      RetentionPolicy: Retain

  #######################
  # IAM POLICIES
  #######################    
  # FetchLambdaCodeFromS3: 
  #   Type: AWS::IAM::Policy
  #   Properties: 
  #     PolicyName: FetchLambdaCodeFromS3
  #     Roles:
  #     PolicyDocument: 
  #       Version: '2012-10-17' 
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - s3:GetObject
  #             - s3:GetObjectACL
  #           Resource: 'arn:aws:s3:::ali-serverless-architecture/*'
  LambdaBasicExecutionPolicy: 
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaBasicExecutionPolicy
      Roles:
        - !Ref LambdaWebSocketRouteUpdateLocationRole
        - !Ref LambdaWebSocketRouteSubmitAnswersRole
        - !Ref LambdaProcessScheduledQuestionsRole
        - !Ref LambdaProcessResultsRole
        - !Ref LambdaProcessPointsTransferRole
        - !Ref LambdaProcessPendingRequestsRole
        - !Ref LambdaProcessPendingGamesRole
        - !Ref LambdaMatchPlayersRole
        - !Ref CognitoInitializePlayerRole
        - !Ref WebSocketRouteDisconnectRole
        - !Ref WebSocketRouteConnectRole
        - !Ref LambdaSignUpRole
        - !Ref LambdaCognitoAuthenticatorRole
        - !Ref LambdaCognitoAuthorizerRole
        - !Ref WebSocketRouteRejectRequestRole
        - !Ref WebSocketRouteAcceptRequestRole
      PolicyDocument: 
        Version: '2012-10-17' 
        Statement:
          - Effect: "Allow"
            Action: 
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
Outputs:
  ClickCollectRestApiInvokeURL:
      Value: !Sub "https://${ClickCollectRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ClickCollectRestApiStageName}"
  


