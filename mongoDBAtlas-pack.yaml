AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A Node.js web service deployed to AWS Lambda.
Parameters:
  MongoDbApiKey:
    Type: String
    Default: kmdwueir
  MongoDbSecretKey:
    Type: String
    Default: 755ed978-c944-4627-b210-6ae1ecb71424
  MongoDBAtlasOrganizationID:
    Type: String
    Default: 5c7b7335cf09a27596230eea
  AtlasGroupName:
    Type: String
    Default: MyGroup
  AtlasDatabaseName:
    Type: String
    Default: TestDatabase
  AtlasCollectionName:
    Type: String
    Default: TestCollection
Resources:
  MongoDBSetupGroup:
    Type: Custom::MongoDBSetupGroup
    DependsOn:
    - FetchLambdaCodeFromS3
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - ConfigMongoGroup
        - Arn
      orgId:
        Ref: MongoDBAtlasOrganizationID
      name: Test_group
  MongoDBSetupDBIpWhitelist:
    Type: Custom::MongoDBSetupIpWhitelist
    DependsOn:
    - FetchLambdaCodeFromS3
    - MongoDBSetupGroup
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - ConfigMongoIpWhitelist
        - Arn
      groupId:
        Fn::GetAtt:
        - MongoDBSetupGroup
        - id
      ipAddress: 0.0.0.0/0
  MongoDBSetupCluster:
    Type: Custom::MongoDBSetupCluster
    DependsOn:
    - FetchLambdaCodeFromS3
    - MongoDBSetupGroup
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - ConfigMongoCluster
        - Arn
      groupId:
        Fn::GetAtt:
        - MongoDBSetupGroup
        - id
      name: TestCluster
      autoScalling:
        compute:
          enabled: true
          scaleDownEnabled: true
          minInstanceSize: M10
          diskGBEnabled: true
      diskSizeGB: 10
      mongoDBMajorVersion: 4.2
      providerSettings:
        autoScaling:
          compute:
            minInstanceSize: M10
            maxInstanceSize: M20
        diskIOPS: 100
        volumeType: STANDARD
        encryptEBSVolume: true
        instanceSizeName: M10
        providerName: AWS
        regionName: US_EAST_1
  MongoDBSetupStitch:
    Type: Custom::MongoDBSetupStitch
    DependsOn:
    - FetchLambdaCodeFromS3
    - MongoDBSetupCluster
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - ConfigMongoStitch
        - Arn
      groupId:
        Fn::GetAtt:
        - MongoDBSetupGroup
        - id
      name: TestStitchApp
      deployment_model: LOCAL
      region: us-east-1
  MongoDBSetupService:
    Type: Custom::MongoDBSetupService
    DependsOn:
    - FetchLambdaCodeFromS3
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - ConfigMongoService
        - Arn
      groupId:
        Fn::GetAtt:
        - MongoDBSetupGroup
        - id
      appId:
        Fn::GetAtt:
        - MongoDBSetupStitch
        - _id
      name: MyService1
      type: mongodb-atlas
      config:
        clusterName:
          Fn::GetAtt:
          - MongoDBSetupCluster
          - name
  MongoDBSetupDBUser:
    Type: Custom::MongoDBSetupDatabaseUser
    DependsOn:
    - FetchLambdaCodeFromS3
    - MongoDBSetupGroup
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - ConfigMongoDatabaseUser
        - Arn
      groupId:
        Fn::GetAtt:
        - MongoDBSetupGroup
        - id
      databaseName: admin
      password: changeme123
      username: david
      roles:
      - databaseName: admin
        roleName: atlasAdmin
  MongoDBSetupCollection:
    Type: Custom::MongoDBSetupCollection
    DependsOn:
    - FetchLambdaCodeFromS3
    - MongoDBSetupDBUser
    - MongoDBSetupCluster
    - MongoDBSetupDBIpWhitelist
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - ConfigMongoCollection
        - Arn
      groupId:
        Fn::GetAtt:
        - MongoDBSetupGroup
        - id
      database:
        Ref: AtlasDatabaseName
      collection:
        Ref: AtlasCollectionName
      url:
        Fn::Join:
        - //
        - - Fn::Select:
            - 0
            - Fn::Split:
              - //
              - Fn::GetAtt:
                - MongoDBSetupCluster
                - srvAddress
          - Fn::Join:
            - '@'
            - - Fn::Join:
                - ':'
                - - Fn::GetAtt:
                    - MongoDBSetupDBUser
                    - username
                  - Fn::GetAtt:
                    - MongoDBSetupDBUser
                    - password
              - Fn::Select:
                - 1
                - Fn::Split:
                  - //
                  - Fn::GetAtt:
                    - MongoDBSetupCluster
                    - srvAddress
  MongoDBSetupTrigger:
    Type: Custom::MongoDBSetupTrigger
    DependsOn:
    - FetchLambdaCodeFromS3
    - MongoDBSetupCollection
    - MongoDBSetupService
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - ConfigMongoTrigger
        - Arn
      groupId:
        Fn::GetAtt:
        - MongoDBSetupGroup
        - id
      appId:
        Fn::GetAtt:
        - MongoDBSetupStitch
        - _id
      name: TestTrigger
      type: DATABASE
      event_processors:
        AWS_EVENTBRIDGE:
          type: AWS_EVENTBRIDGE
          config:
            account_id:
              Ref: AWS::AccountId
            region:
              Ref: AWS::Region
      config:
        operation_types:
        - INSERT
        - UPDATE
        - DELETE
        - REPLACE
        full_document: true
        match: {}
        collection:
          Fn::GetAtt:
          - MongoDBSetupCollection
          - name
        database:
          Ref: AtlasDatabaseName
        service_id:
          Fn::GetAtt:
          - MongoDBSetupService
          - _id
  ConfigMongoGroup:
    Type: AWS::Serverless::Function
    DependsOn:
    - FetchLambdaCodeFromS3
    Properties:
      FunctionName: configMongoGroup
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: s3://ali-su-mongodb-cloudformation/e5eb0bc5a1f2534b92fb752fc629b960
      Layers:
      - Ref: serverlessLayer
      Timeout: 360
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - ConfigMongoDatabaseRole
        - Arn
      Environment:
        Variables:
          API_KEY:
            Ref: MongoDbApiKey
          SECRET_KEY:
            Ref: MongoDbSecretKey
  ConfigMongoCluster:
    Type: AWS::Serverless::Function
    DependsOn:
    - FetchLambdaCodeFromS3
    Properties:
      FunctionName: configMongoDBCluster
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: s3://ali-su-mongodb-cloudformation/cfecc0269fa1273fc7cb2e073f797dd6
      Layers:
      - Ref: serverlessLayer
      Timeout: 900
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - ConfigMongoClusterRole
        - Arn
      Environment:
        Variables:
          API_KEY:
            Ref: MongoDbApiKey
          SECRET_KEY:
            Ref: MongoDbSecretKey
  ConfigMongoStitch:
    Type: AWS::Serverless::Function
    DependsOn:
    - FetchLambdaCodeFromS3
    Properties:
      FunctionName: configMongoStitch
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: s3://ali-su-mongodb-cloudformation/f38e05d0d72f4510f8efa48f2d4d2a73
      Layers:
      - Ref: serverlessLayer
      Timeout: 120
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - ConfigMongoDatabaseRole
        - Arn
      Environment:
        Variables:
          API_KEY:
            Ref: MongoDbApiKey
          SECRET_KEY:
            Ref: MongoDbSecretKey
  ConfigMongoService:
    Type: AWS::Serverless::Function
    DependsOn:
    - FetchLambdaCodeFromS3
    Properties:
      FunctionName: configMongoService
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: s3://ali-su-mongodb-cloudformation/7375bf475d937e80c38acb0aefe32d26
      Layers:
      - Ref: serverlessLayer
      Timeout: 360
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - ConfigMongoDatabaseRole
        - Arn
      Environment:
        Variables:
          API_KEY:
            Ref: MongoDbApiKey
          SECRET_KEY:
            Ref: MongoDbSecretKey
  ConfigMongoDatabaseUser:
    Type: AWS::Serverless::Function
    DependsOn:
    - FetchLambdaCodeFromS3
    Properties:
      FunctionName: configMongoDatabaseUser
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: s3://ali-su-mongodb-cloudformation/961cff9f20351a7b133748e17e30272c
      Layers:
      - Ref: serverlessLayer
      Timeout: 360
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - ConfigMongoDatabaseRole
        - Arn
      Environment:
        Variables:
          API_KEY:
            Ref: MongoDbApiKey
          SECRET_KEY:
            Ref: MongoDbSecretKey
  ConfigMongoIpWhitelist:
    Type: AWS::Serverless::Function
    DependsOn:
    - FetchLambdaCodeFromS3
    Properties:
      FunctionName: configMongoIpWhitelist
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: s3://ali-su-mongodb-cloudformation/6b3e928125f4a2a54bec13794a10d241
      Layers:
      - Ref: serverlessLayer
      Timeout: 360
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - ConfigMongoDatabaseRole
        - Arn
      Environment:
        Variables:
          API_KEY:
            Ref: MongoDbApiKey
          SECRET_KEY:
            Ref: MongoDbSecretKey
  ConfigMongoCollection:
    Type: AWS::Serverless::Function
    DependsOn:
    - FetchLambdaCodeFromS3
    Properties:
      FunctionName: configMongoCollection
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: s3://ali-su-mongodb-cloudformation/e7bf5b8ad44a98a3e442e750675bed56
      Layers:
      - Ref: serverlessLayer
      Timeout: 360
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - ConfigMongoDatabaseRole
        - Arn
      Environment:
        Variables:
          API_KEY:
            Ref: MongoDbApiKey
          SECRET_KEY:
            Ref: MongoDbSecretKey
  ConfigMongoTrigger:
    Type: AWS::Serverless::Function
    DependsOn:
    - FetchLambdaCodeFromS3
    Properties:
      FunctionName: configMongoTrigger
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: s3://ali-su-mongodb-cloudformation/8fbded8dd76e20a971eb3d6b13f4d233
      Layers:
      - Ref: serverlessLayer
      Timeout: 120
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - ConfigMongoDatabaseRole
        - Arn
      Environment:
        Variables:
          API_KEY:
            Ref: MongoDbApiKey
          SECRET_KEY:
            Ref: MongoDbSecretKey
  serverlessLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: serverlessLayer
      Description: Layer description
      ContentUri: s3://ali-su-mongodb-cloudformation/64ac710842dc1e8e9b26c35374849be9
      CompatibleRuntimes:
      - nodejs12.x
      - nodejs8.10
      LicenseInfo: Available under the MIT-0 license.
      RetentionPolicy: Retain
  ConfigMongoClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: LambdaBasicExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: InvokeSQS
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            Resource: '*'
  ConfigMongoDatabaseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: LambdaBasicExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  FetchLambdaCodeFromS3:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: FetchLambdaCodeFromS3
      Roles:
      - Ref: ConfigMongoClusterRole
      - Ref: ConfigMongoDatabaseRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:GetObjectACL
          Resource: arn:aws:s3:::ali-serverless-architecture/*
Outputs:
  EventSourceName:
    Description: Parnter event source name for AWS EventBridge connection.
    Value:
      Fn::GetAtt:
      - MongoDBSetupTrigger
      - EventSourceName
  MongoDbURL:
    Description: MongoDB connection string
    Value:
      Fn::Join:
      - /
      - - Fn::Join:
          - //
          - - Fn::Select:
              - 0
              - Fn::Split:
                - //
                - Fn::GetAtt:
                  - MongoDBSetupCluster
                  - srvAddress
            - Fn::Join:
              - '@'
              - - Fn::Join:
                  - ':'
                  - - Fn::GetAtt:
                      - MongoDBSetupDBUser
                      - username
                    - Fn::GetAtt:
                      - MongoDBSetupDBUser
                      - password
                - Fn::Select:
                  - 1
                  - Fn::Split:
                    - //
                    - Fn::GetAtt:
                      - MongoDBSetupCluster
                      - srvAddress
        - Ref: AtlasDatabaseName
  DatabaseName:
    Description: MongoDB atlas database name.
    Value:
      Ref: AtlasDatabaseName
  CollectionName:
    Description: MongoDB atlas collection name.
    Value:
      Ref: AtlasCollectionName
